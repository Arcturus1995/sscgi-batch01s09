class Pokemon {
  constructor(name, type, level, hp, defense) {
    this.name = name;
    this.type = type;
    this.level = level;
    this.hp = hp;
    this.maxHp = hp; // Store the maximum HP for healing
    this.defense = defense || 0;
    this.temporaryDefense = 0;
    this.hasLeveledUp = false;
  }

  attack(opponent) {
    let damage = this.calculateDamage();
    damage = this.calculateCriticalDamage(damage);

    if (this.hasLeveledUp) {
      this.specialAttack(opponent, damage);
      this.hasLeveledUp = false;
    } else {
      console.log(
        `%c${this.trainer.name}: ${this.name} attacks ${opponent.name} causing ${damage} damage!`,
        "color: orange; font-weight: bold;"
      );
    }
    opponent.receiveDamage(damage);
  }

  receiveDamage(damage) {
    const totalDefense = this.defense + this.temporaryDefense;
    const netDamage = Math.max(damage - totalDefense, 0);
    this.hp -= netDamage;
    this.hp = Math.max(this.hp, 0);

    console.log(
      `%c${this.name} received ${netDamage} damage (defense of ${totalDefense}). Remaining HP: ${this.hp}.`,
      "color: red; font-weight: bold;"
    );

    this.temporaryDefense = 0;
  }

  specialAttack(opponent, damage) {
    console.log(
      `%c${this.trainer.name}: ${this.name} uses a special ${this.type} attack on ${opponent.name} causing ${damage} damage!`,
      "color: purple; font-weight: bold;"
    );
    opponent.receiveDamage(damage);
  }

  heal(amount = 20) {
    this.hp += amount;
    this.hp = Math.min(this.hp, this.maxHp);
    this.temporaryDefense = 5;
    console.log(
      `%cðŸ’– ${this.name} has been healed! Current HP: ${this.hp}, Temporary Defense: ${this.temporaryDefense}ðŸ’–.`,
      "color: green; font-weight: bold;"
    );
  }

  fullyHeal() {
    this.hp = this.maxHp;
    console.log(
      `%cðŸ’– ${this.name} has been fully healed! Current HP: ${this.hp} ðŸ’–.`,
      "color: green; font-weight: bold;"
    );
  }

  calculateDamage() {
    return this.level * 2;
  }

  criticalHit() {
    return Math.random() < 0.1;
  }

  calculateCriticalDamage(damage) {
    if (this.criticalHit()) {
      let criticalDamages = Math.round(damage * 0.3);
      console.log(`${this.name} lands a damage! ${damage}`);
      console.log(`ðŸ’¥${this.name} lands a critical hit! ${criticalDamages}ðŸ’¥`);
      this.level += 1;
      this.hasLeveledUp = true; // Set the flag to true when the PokÃ©mon levels up
      console.log(` ${this.name} has leveled up! New level ${this.level}`);
      return damage + criticalDamages;
    }
    return damage;
  }
}

// Define PokÃ©mon subclasses (e.g., Electric, Fire, Water, etc.)
class ElectricPokemon extends Pokemon {
  constructor(name, level, hp, defense) {
    super(name, "Electric", level, hp, defense);
  }

  specialAttack(opponent, damage) {
    console.log(
      `%c${this.trainer.name}: ${this.name} uses Thunderbolt on ${opponent.name} causing ${damage}!`,
      "color: yellow; font-weight: bold;"
    );
    opponent.receiveDamage(damage);
  }
}

class FirePokemon extends Pokemon {
  constructor(name, level, hp, defense) {
    super(name, "Fire", level, hp, defense);
  }

  specialAttack(opponent, damage) {
    console.log(
      `%c${this.trainer.name}: ${this.name} uses Fireball on ${opponent.name} causing ${damage} damage!`,
      "color: red; font-weight: bold;"
    );
    opponent.receiveDamage(damage);
  }
}

class EarthPokemon extends Pokemon {
  constructor(name, level, hp, defense) {
    super(name, "Earth", level, hp, defense);
  }

  specialAttack(opponent, damage) {
    console.log(
      `%c${this.trainer.name}: ${this.name} uses Earthquake on ${opponent.name} causing ${damage} damage!`,
      "color: brown; font-weight: bold;"
    );
    opponent.receiveDamage(damage);
  }
}

class WindPokemon extends Pokemon {
  constructor(name, level, hp, defense) {
    super(name, "Wind", level, hp, defense);
  }

  specialAttack(opponent, damage) {
    console.log(
      `%c${this.trainer.name}: ${this.name} uses Tornado on ${opponent.name} causing ${damage} damage!`,
      "color: lightblue; font-weight: bold;"
    );
    opponent.receiveDamage(damage);
  }
}

class WaterPokemon extends Pokemon {
  constructor(name, level, hp, defense) {
    super(name, "Water", level, hp, defense);
  }

  specialAttack(opponent, damage) {
    console.log(
      `%c${this.trainer.name}: ${this.name} uses Water Blast on ${opponent.name} causing ${damage} damage!`,
      "color: blue; font-weight: bold;"
    );
    opponent.receiveDamage(damage);
  }
}

class Trainer {
  constructor(name) {
    this.name = name;
    this.pokemonList = [];
    this.hasBattled = false;
  }

  addPokemon(pokemon) {
    pokemon.trainer = this;
    this.pokemonList.push(pokemon);
  }

  selectNextPokemon(excludePokemon = null) {
    return this.pokemonList.find(
      (pokemon) => pokemon.hp > 0 && pokemon !== excludePokemon
    );
  }

  fullyHealAllPokemons() {
    this.pokemonList.forEach((pokemon) => pokemon.fullyHeal());
  }
}

let winnerBracket = [];
let winnerPokemons = [];
let loserPokemons = [];
let loserBracket = [];
class Battle {
  constructor(trainer1, trainer2) {
    this.trainer1 = trainer1;
    this.trainer2 = trainer2;
  }

  start() {
    console.log(
      `%câš¡Battle between ${this.trainer1.name} and ${this.trainer2.name} begins!âš¡`,
      "color: gold; font-weight: bold; font-size: 20px;"
    );

    let trainer1Pokemon = this.trainer1.selectNextPokemon();
    let trainer2Pokemon = this.trainer2.selectNextPokemon();

    while (trainer1Pokemon && trainer2Pokemon) {
      console.log(`${this.trainer1.name}'s Pokemon: ${trainer1Pokemon.name}`);
      console.log(`${this.trainer2.name}'s Pokemon: ${trainer2Pokemon.name}`);

      while (trainer1Pokemon.hp > 0 && trainer2Pokemon.hp > 0) {
        let randomHeal = Math.random() < 0.2;
        if (randomHeal) {
          let healAmount = Math.floor(Math.random() * 20) + 10;
          console.log(`${trainer1Pokemon.name} decides to heal! ${healAmount}`);
          trainer1Pokemon.heal(healAmount);
        } else {
          trainer1Pokemon.attack(trainer2Pokemon);
        }

        if (trainer2Pokemon.hp > 0) {
          let randomHeal = Math.random() < 0.2;
          if (randomHeal) {
            let healAmount = Math.floor(Math.random() * 20) + 10;
            console.log(
              `${trainer2Pokemon.name} decides to heal! ${healAmount}`
            );
            trainer2Pokemon.heal(healAmount);
          } else {
            trainer2Pokemon.attack(trainer1Pokemon);
          }
        }
      }

      if (trainer1Pokemon.hp <= 0) {
        console.log(`${trainer1Pokemon.name} has fainted!`);
        trainer1Pokemon = this.trainer1.selectNextPokemon(trainer1Pokemon);
      } else {
        console.log(`${trainer1Pokemon.name} is the winner!`);
        trainer1Pokemon.fullyHeal();
        winnerPokemons.push(trainer1Pokemon.name);
        winnerBracket.push(this.trainer1);
        trainer1Pokemon = this.trainer1.selectNextPokemon(trainer1Pokemon);
      }

      if (trainer2Pokemon.hp <= 0) {
        trainer2Pokemon = this.trainer2.selectNextPokemon(trainer2Pokemon);
      } else {
        console.log(`${trainer2Pokemon.name} is the winner!`);
        trainer2Pokemon.fullyHeal();
        trainer2Pokemon = this.trainer2.selectNextPokemon(trainer2Pokemon);
      }
    }

    console.log(
      `%cBattle has ended.`,
      "color: gold; font-weight: bold; font-size: 20px;"
    );
    if (!trainer1Pokemon) {
      console.log(
        `%c${this.trainer1.name} has lost the battle!`,
        "color: red; font-weight: bold; font-size: 20px;"
      );
      this.trainer2.fullyHealAllPokemons();
      return false; // Trainer 1 lost
    } else if (!trainer2Pokemon) {
      console.log(
        `%c${this.trainer2.name} has lost the battle!`,
        "color: red; font-weight: bold; font-size: 20px;"
      );
      this.trainer1.fullyHealAllPokemons();
      return true; // Trainer 1 wins
    }
  }

  startRoundRobinTournament(trainers) {
    let winners = [];

    trainers.forEach(function (_trainer, index) {
      if (index % 2 === 0 && index + 1 < trainers.length) {
        console.log(
          `Battle between ${trainers[index].name} and ${
            trainers[index + 1].name
          }`
        );
        const battle = new Battle(trainers[index], trainers[index + 1]);
        const result = battle.start();
        winners.push(result ? trainers[index] : trainers[index + 1]);
      }
    });

    console.log(`Winners of Round 1:`);
    winners.forEach((winner) => console.log(winner.name));
    // Second round: Winner vs Winner, Loser vs Loser
    if (winners.length > 1) {
      console.log("Next round: Winner vs Winner and Loser vs Loser");
      const winnerBattle = new Battle(winners[0], winners[1]);
      const finalResult = winnerBattle.start();
      const finalWinner = finalResult ? winners[0] : winners[1];
      console.log(`The Champion of the tournament is ${finalWinner.name}!`);
    }
    winners.forEach(function (winner) {
      winnerBracket.push(winner.name);
    });
    console.log(`First round winner: ${winnerBracket}`);
  }
}

// Function to handle trainer input
function getTrainerCount() {
  let input = prompt("Please enter the number of Trainers (2-5):");
  let trainerCount = parseInt(input);

  if (trainerCount >= 2 && trainerCount <= 5) {
    return trainerCount;
  } else {
    alert("Invalid number of trainers. Please enter a number between 2 and 5.");
    return getTrainerCount();
  }
}

// Function to handle PokÃ©mon input
function getPokemonCount() {
  let input = prompt("Please enter the number of PokÃ©mon per trainer:");
  let pokemonCount = parseInt(input);

  if (pokemonCount >= 3 && pokemonCount <= 5) {
    return pokemonCount;
  } else {
    alert("Invalid number of Pokemon. Please enter a number between 3 and 5.");
    return getPokemonCount();
  }
}

// Generate PokÃ©mon and assign to trainers
function assignPokemons(trainers, pokemonCount) {
  const randomDefense = Math.floor(Math.random() * 6);
  let availablePokemons = [
    // Electric pokemon
    new ElectricPokemon("Volt", 10, 100, randomDefense),
    new ElectricPokemon("Raikou ", 10, 100, randomDefense),
    new ElectricPokemon("Pikachu", 10, 100, randomDefense),
    new ElectricPokemon("Gust", 10, 100, randomDefense),
    new ElectricPokemon("Regieleki", 10, 100, randomDefense),
    // Fire pokemon
    new FirePokemon("Charmander", 10, 100, randomDefense),
    new FirePokemon("Moltres", 10, 100, randomDefense),
    new FirePokemon("Reshiram", 10, 100, randomDefense),
    new FirePokemon("Flareon", 10, 100, randomDefense),
    new FirePokemon("Chi-Yu", 10, 100, randomDefense),
    // water pokemon
    new WaterPokemon("Squirtle", 10, 100, randomDefense),
    new WaterPokemon("Palkia", 10, 100, randomDefense),
    new WaterPokemon("Manaphy", 10, 100, randomDefense),
    new WaterPokemon("Blastoise", 10, 100, randomDefense),
    new WaterPokemon("Pelipper", 10, 100, randomDefense),
    //earth pokemon
    new EarthPokemon("Bulbasaur", 10, 100, randomDefense),
    new EarthPokemon("Zygarde ", 10, 100, randomDefense),
    new EarthPokemon("Garchomp", 10, 100, randomDefense),
    new EarthPokemon("Palossand", 10, 100, randomDefense),
    new EarthPokemon("Sandile", 10, 100, randomDefense),

    // wind pokemon
    new WindPokemon("Tornadus", 10, 100, randomDefense),
    new WindPokemon("Rayquaza", 10, 100, randomDefense),
    new WindPokemon("Lugia", 10, 100, randomDefense),
    new WindPokemon("Noivern", 10, 100, randomDefense),
    new WindPokemon("Swellow", 10, 100, randomDefense),
  ];

  trainers.forEach((trainer) => {
    for (let i = 0; i < pokemonCount; i++) {
      const randomIndex = Math.floor(Math.random() * availablePokemons.length);
      const selectedPokemon = availablePokemons.splice(randomIndex, 1)[0];
      trainer.addPokemon(selectedPokemon);
    }
  });
}

// Main function to orchestrate the entire tournament
function startTournament() {
  const trainerCount = getTrainerCount();
  const pokemonCount = getPokemonCount();

  // List of possible trainers
  const allTrainers = [
    new Trainer("Ash"),
    new Trainer("Misty"),
    new Trainer("Brock"),
    new Trainer("Gary"),
    new Trainer("Paul"),
  ];

  // Randomly select trainers
  const selectedTrainers = [];
  while (selectedTrainers.length < trainerCount) {
    const randomIndex = Math.floor(Math.random() * allTrainers.length);
    const selectedTrainer = allTrainers[randomIndex];
    if (!selectedTrainers.includes(selectedTrainer)) {
      selectedTrainers.push(selectedTrainer);
    }
  }

  console.log("Selected Trainers:");
  selectedTrainers.forEach((trainer) => console.log(trainer.name));

  // Assign PokÃ©mon to trainers
  assignPokemons(selectedTrainers, pokemonCount);

  // Display PokÃ©mon for each trainer
  selectedTrainers.forEach((trainer) => {
    console.log(`${trainer.name}'s PokÃ©mon:`);
    trainer.pokemonList.forEach((pokemon) =>
      console.log(`- ${pokemon.name} (Type: ${pokemon.type})`)
    );
  });

  // Start the round robin tournament
  const battle = new Battle(selectedTrainers[0], selectedTrainers[1]);
  battle.startRoundRobinTournament(selectedTrainers);
}

// Start the tournament
startTournament();
